/**
 * Componente Curricular: M√≥dulo Integrado de Programa√ß√£o
 * Autor: Saulo Araujo
 * Data:  13/04/2016
 *
 * Declaro que este c√≥digo foi elaborado por mim de forma individual e
 * n√£o cont√©m nenhum trecho de c√≥digo de outro colega ou de outro autor, 
 * tais como provindos de livros e apostilas, e p√°ginas ou documentos 
 * eletr√¥nicos da Internet. Qualquer trecho de c√≥digo de outra autoria que
 * uma cita√ß√£o para o n√£o a minha est√° destacado com autor e a fonte do
 * c√≥digo, e estou ciente que estes trechos n√£o ser√£o considerados para fins
 * de avalia√ß√£o. Alguns trechos do c√≥digo podem coincidir com de outros
 * colegas pois estes foram discutidos em sess√µes tutorias.
 */


package util;

/**
 * Interface com as assinaturas dos m√©todos que uma classe deve ter ao implementar uma IListaOrdenada.
 * 
 * @author Saulo Araujo
 */
public interface IListaOrdenada extends Iterable{

    /**
     * M√©todo que verifica se a lista est√° vazia..
     * 
     * @return True, caso vazia. Else, caso contr√°rio.
     */
    public boolean estaVazia();

    /**
     * M√©todo que conta quantos objetos h√° na lista.
     * 
     * @return Int com a quantidade de objetos que h√° na lista.
     */
    public int tamanho();

    /**
     * M√©todo que insere um objeto de modo que a lista se mantenha ordenada.
     * 
     * @param o - objeto que ser√° inserido.
     */
    public void insere(Comparable o);

    /**
     * M√©todo que remove um objeto da lista.
     * 
     * @param o - objeto que ser√° removido.
     * 
     * @return o objeto que foi removido.
     * 
     * @throws DadoNaoEncontradoException - Lan√ßa exce√ß√£o caso o objeto n√£o fa√ßa parte da lista.
     */
    public Comparable remove(Comparable o);    

    /**
     * M√©todo que retorna um objeto numa determinada posi√ß√£o da lista.
     * 
     * @param index - √?ndice determinado.
     * 
     * @return O objeto do √≠ndice.
     * 
     * @throws DadoNaoEncontradoException - Lan√ßa exce√ß√£o caso n√£o exista a posi√ß√£o do determinado √≠ndice ou caso o √≠ndice seja menor que 0.
     */
    public Comparable recupera(int index);
    
    /**
     * M√©todo que deleta a lista.
     */
    public void deletarLista();
}